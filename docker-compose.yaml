version: "3.9"
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_PORTS}:${ZOOKEEPER_PORTS}"


  kafka:
    image: confluentinc/cp-kafka:7.2.1
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
    ports:
      - "${KAFKA_PORTS}:${KAFKA_PORTS}"
    volumes:
      - kafka_data:/var/lib/kafka/data

  redis:
    image: redis:latest
    command: redis-server
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORTS}:${REDIS_PORTS}"
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORTS}:${POSTGRES_PORTS}"
    volumes:
      - postgres_data:/var/lib/postgresql/data


  users-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: users
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_ADDR=${REDIS_ADDR}
      - ${REDIS_PASSWORD}
      - ${REDIS_USER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}"

  posts-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: posts
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_ADDR=${REDIS_ADDR}
      - ${REDIS_PASSWORD}
      - ${REDIS_USER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTS_SERVICE_PORT}:${POSTS_SERVICE_PORT}"


  purchase-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: purchases
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_ADDR=${REDIS_ADDR}
      - ${REDIS_PASSWORD}
      - ${REDIS_USER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${PURCHASES_SERVICE_PORT}:${PURCHASES_SERVICE_PORT}"


  leaders-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: leaders
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_ADDR=${REDIS_ADDR}
      - ${REDIS_PASSWORD}
      - ${REDIS_USER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${LEADERS_SERVICE_PORT}:${LEADERS_SERVICE_PORT}"

volumes:
  redis_data:
  postgres_data:
  kafka_data: